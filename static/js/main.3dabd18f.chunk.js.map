{"version":3,"sources":["Components/FirstPage/Title/Title.jsx","imports/direct/index.jsx","Components/FirstPage/Add/Add.jsx","Components/FirstPage/Show/Show.jsx","Container/FirstPage/FirstPage.jsx","Components/SecondPage/Title/Title.jsx","imports/routes/index.jsx","Container/SecondPage/SecondPage.jsx","App.jsx","serviceWorker.js","index.js"],"names":["Title","props","react_default","a","createElement","className","Page1Text","Page2Text","Add","Link","to","Show","this","db","map","item","index","key","date_created","number","date_supply","comment","Component","firsPage","state","componentWillMount","fetch","then","response","json","data","console","log","_this","setState","catch","error","FirstPage_Title_Title","FirstPage_Add_Add","FirstPage_Show_Show","React","indexRoutes","path","name","component","Page1","start_date","end_date","fetchPOST","method","body","JSON","stringify","headers","Content-type","clickHandler","e","preventDefault","onChangeHandler","currentTarget","target","value","_this2","Components_SecondPage_Title_Title","action","type","id","onChange","onClick","App","BrowserRouter","Switch","route","Route","exact","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.3dabd18f.chunk.js","sourcesContent":["import React from \"react\";\r\nimport './Title.css'\r\n\r\nconst Title = props => <h1 className=\"Title\">Invoices</h1>;\r\n\r\nexport default Title;\r\n","export const Page1Text = {\r\n  redirect: \"/adddata\"\r\n};\r\n\r\nexport const Page2Text = {\r\n  redirectName: \"Go to Page1\",\r\n  redirect: \"/\"\r\n};\r\n","import React from \"react\";\r\n\r\nimport \"./Add.css\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { Page1Text } from \"../../../imports/direct/index\";\r\n\r\nconst Add = props => {\r\n  return (\r\n    <div className=\"Add\">\r\n      <div className=\"content\">\r\n        <h3>Actions</h3>\r\n        <Link to={Page1Text.redirect}><button>Add new</button></Link>\r\n        <br />\r\n        {/* actions Add new Форма создания, переход на страницу создания. */}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Add;\r\n","import React, { Component } from \"react\";\r\n\r\nimport \"./Show.css\";\r\n\r\nclass Show extends Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n        <h3>Invoices</h3>\r\n        <table>\r\n          <tr>\r\n            <th>Create</th>\r\n            <th>№</th>\r\n            <th>Supply</th>\r\n            <th>Comment</th>\r\n          </tr>\r\n          {this.props.db.map((item, index) => (\r\n            <tr key={index}>\r\n              <th>{item.date_created}</th>\r\n              <th>{item.number}</th>\r\n              <th>{item.date_supply}</th>\r\n              <th>{item.comment}</th>\r\n            </tr>\r\n          ))}\r\n        </table>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Show;\r\n","import React from \"react\";\r\n\r\nimport \"../main.css\";\r\nimport Title from \"../../Components/FirstPage/Title/Title\";\r\nimport Add from \"../../Components/FirstPage/Add/Add\";\r\nimport Show from \"../../Components/FirstPage/Show/Show\";\r\n\r\nclass firsPage extends React.Component {\r\n  state = {\r\n    db: []\r\n  };\r\n  componentWillMount = () => {\r\n    fetch(\"http://localhost:3000/invoices\")\r\n      .then(response => response.json())\r\n      .then(data => {\r\n        console.log(\"data\", data);\r\n        this.setState({ db: data });\r\n      })\r\n      .catch(error => console.log(\"error\", error));\r\n  };\r\n  render() {\r\n    return (\r\n      <div className=\"main\">\r\n        <Title />\r\n        <Add />\r\n        {/* переход на создание invoices */}\r\n        <Show db={this.state.db} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default firsPage;\r\n","import React from \"react\";\r\nimport './Title.css'\r\n\r\nconst Title = props => <h1 className=\"Title\">Add invoices</h1>;\r\n\r\nexport default Title;\r\n","import Page1 from \"../../Container/FirstPage/FirstPage\";\r\nimport Page2 from \"../../Container/SecondPage/SecondPage\";\r\n\r\nconst indexRoutes = [\r\n  { path: \"/\", name: \"Page1\", component: Page1 },\r\n  { path: \"/adddata\", name: \"Page2\", component: Page2 }\r\n];\r\n\r\nexport default indexRoutes;\r\n","import React from \"react\";\r\n\r\nimport \"../main.css\";\r\n\r\nimport { Page2Text } from \"../../imports/direct/index\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nimport Title from \"../../Components/SecondPage/Title/Title\";\r\nimport \"../../Components/SecondPage/Add/Add.css\";\r\n\r\nclass secondPage extends React.Component {\r\n  state = {\r\n    db: [],\r\n    number: \"\",\r\n    start_date: \"\",\r\n    end_date: \"\",\r\n    comment: \"\"\r\n  };\r\n\r\n  fetchPOST = () => {\r\n    fetch(\"http://localhost:3000/invoices\", {\r\n      method: \"POST\",\r\n      body: JSON.stringify({\r\n        date_created: this.state.start_date,\r\n        number: this.state.number,\r\n        date_supply: this.state.end_date,\r\n        comment: this.state.comment\r\n      }),\r\n      headers: {\r\n        \"Content-type\": \"application/json; charset=UTF-8\"\r\n      }\r\n    }).then(response => response.json());\r\n  };\r\n\r\n  clickHandler = e => {\r\n    e.preventDefault();\r\n    this.fetchPOST();\r\n    this.setState({\r\n      number: \"\",\r\n      start_date: \"\",\r\n      end_date: \"\",\r\n      comment: \"\"\r\n    });\r\n  };\r\n\r\n  onChangeHandler = e => {\r\n    if (e.currentTarget.name === \"number\") {\r\n      this.setState({ number: e.target.value });\r\n    }\r\n    if (e.currentTarget.name === \"start_date\") {\r\n      this.setState({ start_date: e.target.value });\r\n    }\r\n    if (e.currentTarget.name === \"end_date\") {\r\n      this.setState({ end_date: e.target.value });\r\n    }\r\n    if (e.currentTarget.name === \"comment\") {\r\n      this.setState({ comment: e.target.value });\r\n    }\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"main\">\r\n        <Title />\r\n        <div className=\"Add\">\r\n          <div className=\"addWrapper\">\r\n            <form action=\"\">\r\n              <p>\r\n                <p>Number:</p>\r\n                <input\r\n                  type=\"text\"\r\n                  name=\"number\"\r\n                  id=\"\"\r\n                  value={this.state.number}\r\n                  onChange={e => this.onChangeHandler(e)}\r\n                />\r\n              </p>\r\n              <p>\r\n                <p>Invoice Date:</p>\r\n                <input\r\n                  type=\"text\"\r\n                  name=\"start_date\"\r\n                  id=\"\"\r\n                  value={this.state.start_date}\r\n                  onChange={e => this.onChangeHandler(e)}\r\n                />\r\n              </p>\r\n              <p>\r\n                <p>Supply Date:</p>\r\n                <input\r\n                  type=\"text\"\r\n                  name=\"end_date\"\r\n                  id=\"\"\r\n                  value={this.state.end_date}\r\n                  onChange={e => this.onChangeHandler(e)}\r\n                />\r\n              </p>\r\n              <p className=\"comment\">\r\n                <p>Comment:</p>\r\n                <input\r\n                  type=\"text\"\r\n                  name=\"comment\"\r\n                  id=\"\"\r\n                  value={this.state.comment}\r\n                  onChange={e => this.onChangeHandler(e)}\r\n                />\r\n              </p>\r\n              <br />\r\n              <div>\r\n                <button className=\"addbutton\" onClick={this.clickHandler}>\r\n                  Отправка данных в json.\r\n                </button>\r\n                <Link to={Page2Text.redirect}>\r\n                  <button>Переход на главную страницу.</button>\r\n                </Link>\r\n              </div>\r\n            </form>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default secondPage;\r\n","import React, { Component } from \"react\";\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\n\nimport indexRoutes from \"./imports/routes/index\";\n\nimport \"./App.css\";\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <Router>\n          <Switch>\n            {indexRoutes.map(route => {\n              return (\n                <Route\n                  exact\n                  path={route.path}\n                  key={route.name}\n                  component={route.component}\n                />\n              );\n            })}\n          </Switch>\n        </Router>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}